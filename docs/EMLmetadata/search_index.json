[
["index.html", "Best Practices for Dataset Metadata in Ecological Metadata Language (EML) 1 Preface", " Best Practices for Dataset Metadata in Ecological Metadata Language (EML) Environmental Data Initiative 2019-10-31 1 Preface This document contains current “Best Practice” recommendations for EML content for metadata related to ecological and environmental data. It is intended to augment the EML schema documentation for a less-technical audience. This is one component of several resources available to EML preparers. These recommendations are directed towards the following goals: Provide guidance and clarification in the implementation of EML for datasets Minimize heterogeneity of EML documents to simplify development and re-use of software built to ingest it Maximize interoperability of EML documents to facilitate data synthesis "],
["introduction.html", "2 Introduction", " 2 Introduction EML Best Practice recommendations have evolved over time. The most active contributors have been members of the LTER Information Managers Committee in multiple working groups and workshops. EML has been widely used for several years with multiple applications written against it, and the community has had the opportunity to observe the consequences of many content patterns. As much as possible, recommendations have been aligned with those experiences, as well as with the capability of data contributors. Timeline and Previous Revisions 2017 Best Practices for Dataset Metadata in EML v3 (this document) 2016 EDI inception, see http://environmentaldatainitiative.org 2011 EML Best Practices for LTER sites v2 2008 EML 2.1 release 2004 EML Best Practices for LTER sites 2003 LTER adopts EML as network exchange standard Contributors, including LTER EML Best Practices Working Groups and workshops in 2003, 2004, 2010 (alphabetical order): Dan Bahauddin Barbara Benson Emery Boose James Brunt Duane Costa Corinna Gries Don Henshaw Margaret O’Brien Ken Ramsey Inigo San Gil Mark Servilla Wade Sheldon Philip Tarrant Theresa Valentine John Vande Castle, Kristin Vanderbilt Jonathan Walsh Yang Xia "],
["conventions-and-definitions.html", "3 Conventions and Definitions", " 3 Conventions and Definitions 3.0.1 Audience This document is intended for data managers. It assumes that readers are familiar with the basic structure of an XML document, and the ability to edit in an XML editor like OxygenXML or XMLSpy. the process for contributing data to a repository. If you reached this document from a repository’s help-page, contact them for more information. 3.0.2 Fonts and typeface Numbered examples of EML nodes are in fixed-width font: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; XML element and attribute names, XPath and references to element names in text are in bold face. Single element names are surrounded by angle brackets, as they appear in XML. &lt;dataTable&gt; /eml:eml/@packageId Some recommendations have special context, e.g., an XML element or attribute may be requested by a community (e.g., LTER), or required by the EDI repository (but not by other repositories). Context notes: Recommendations for EML usage in a specific context are called “context notes”, and are placed in separate paragraphs, in italic. 3.0.3 Definitions EML preparer the person responsible for “building” the EML metadata record. Generally, this is a data manager working with a project or physical site that produces data. Contributor the research project contributing the data package, e.g., an LTER or OBFS site, or a Macrosystems project. Generally, the “EML preparer” works with or for the “Contributor.” Data package the EML metadata together with its entity or entities. This is generally the unit housed in repositories. We use this term to avoid confusion with the EML element “dataset”. 3.0.4 Other EML Resources Some sections refer to further information or tools. These can be found on the EDI website, under “Resources and How To…”, at https://environmentaldatarepository.org "],
["general-recommendations.html", "4 General Recommendations 4.1 Metadata Distribution 4.2 Data Package Identifiers 4.3 High-priority Elements", " 4 General Recommendations Following are general best practices for handling EML dataset metadata: 4.1 Metadata Distribution Do not publicly distribute EML documents containing elements with incorrect information, e.g., as a workaround for missing metadata or to meet validation requirements. Pre-publication drafts, or EML produced for demonstration or testing purposes should be clearly identified as such and not contributed to public archives, because these are passed on to large-scale clearinghouses. For previews of drafts or handling test and demonstration data packages, consult your repository to learn about options. 4.2 Data Package Identifiers Metadata and data set versioning are controlled by the contributor, and so identifiers are tied to local systems. Many repository systems that accept EML-described data support principles of immutable metadata and data entity versioning. EML has elements to contain package identifiers, although these may also be assigned externally. It is the responsibility of the submitters to understand the practices of their intended repository when using identifiers. 4.3 High-priority Elements To support locating data by time, geographic location, and taxonomically, metadata should provide as much information as possible for the data package, in the three &lt;coverage&gt;; elements: &lt;temporalCoverage&gt;; (when), &lt;geographicCoverage&gt;; (where) and &lt;taxonomicCoverage&gt; (what). For a potential user to evaluate the relevance and usability of the data package for their research study or synthesis projects, metadata should include detailed descriptions in the &lt;project&gt;, &lt;methods&gt;, &lt;protocols&gt;, and &lt;intellectualRights&gt; elements. "],
["Root-element.html", "5 The root element: &lt;eml:eml&gt;", " 5 The root element: &lt;eml:eml&gt; This element is the root element in all EML documents. The XPath notation is: /eml:eml The root element holds two important parts, both of which are optional, but recommended. 5.0.1 (???) (XML attribute) This attribute is this location (XPath): /eml:eml/@schemaLocation The schemaLocation attribute tells a processor the name of the schema to which the EML document belongs and where to find it. Most repositories check schema compliance when data packages are deposited, but it is highly recommended that data managers know how and where to specify the schema that their metadata document should adhere to. This way, they can validate their own work in progress, e.g., through an XML editor like OxygenXML. 5.0.2 (???) (XML attribute) This attribute is found at this location (XPath): /eml:eml/@packageId As outlined elsewhere, EML preparers should manage unique identifiers and versioning at the local level (see (???) discussion below). The packageId attribute can be used to contain the same identifier as is used by the repository. See Section III for other information about EML documents in Metacat. Context Note: The packageID attribute is required in all EML documents submitted to EDI. It is entered into the repository software, and the format is standardized to three parts: scope, package-number, revision. The scope should be “edi” unless another scope is justified by prior arrangement. See Example 1. 5.0.3 Top Level Elements An EML dataset is composed of up to three elements under the root element (&lt;eml:eml&gt;): &lt;access&gt; &lt;dataset&gt; &lt;additionalMetadata&gt; 5.0.4 id, system and scope (XML attribute-group) This attribute group can be used on these EML elements: &lt;access&gt; &lt;dataset&gt; &lt;creator&gt; &lt;associatedParty&gt; &lt;contact&gt; &lt;metadataProvider&gt; &lt;publisher&gt; &lt;coverage&gt; &lt;geographicCoverage&gt; &lt;temporalCoverage,&gt; &lt;taxonomicCoverage&gt; &lt;distribution&gt; &lt;software&gt; &lt;citation&gt; &lt;protocol&gt; &lt;project&gt; &lt;dataTable&gt; &lt;otherEntity&gt; &lt;spatialRaster&gt; &lt;spatialReference&gt; &lt;spatialVector&gt; &lt;storedProcedure&gt; &lt;view&gt; &lt;attribute&gt; &lt;constraint&gt; These three attributes are found as a group and are usually optional. The primary use of the id attribute is as an internal reference, hence each id must be unique within one EML document. E.g.,. a &lt;creator&gt; must have a different id than a &lt;dataTable&gt;. And if the same person appears in seberal places (at dataset/creator, protocol/creator or project/creator, the same id cannot be repeated, so either the content of the id must be changed or a reference used for repeated instances. This restriction can cause problems when content is drawn from a system with IDs (e.g. a personnel database), and is under consideration by the EML developers. Ideally the three attributes would work together. The scope attribute can have one of two values, “system” or “document”. It is preferred that when the scope is set to “system”, that the system attribute defines the ID-system, the id attribute content is (presumably) from that system. Currently, a reasonable general practice should be to define a system on the &lt;eml:eml&gt; element and set it to the site (but not set the system attribute at any other level), and to set scope=“document” on elements other than &lt;eml:eml&gt;. Example 1: attributes packageId, id, system, and scope &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;eml:eml xmlns:ds=&quot;eml://ecoinformatics.org/dataset-2.1.0&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:eml=&quot;eml://ecoinformatics.org/eml-2.1.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:stmml=&quot;http://www.xml-cml.org/schema/stmml&quot; xsi:schemaLocation=&quot;eml://ecoinformatics.org/eml-2.1.0 https://nis.lternet.edu/eml-2.1.0/eml.xsd&quot; packageId=&quot;knb-lter-fls.21.3&quot; system=&quot;FLS&quot; scope=&quot;system&quot;&gt; "],
["access.html", "6 access", " 6 access The access element is found at this location (XPath): /eml:eml/access /eml:eml/[entityType]/physical/distribution/access &lt;access&gt; contains a list of rules defining permissions for this metadata record and its data entity. Values must be applicable by the system where data is stored. Many repositories follow the KNB system of using access control format that conforms to the LDAP “distinguishedName (dn)” for an individual, as in “uid=FLS,o=LTER,dc=ecoinformatics,dc=org”. As of EML 2.1.0, &lt;access&gt; trees are allowed at two places: as the first child of the &lt;eml:eml&gt; root element (a sibling to &lt;dataset&gt;) for controlling access to the entire document, and in a physical/distribution tree for controlling access to the resource URL. With the exception of certain sensitive information, metadata should be publicly accessible. The &lt;access&gt; element is optional, and if omitted, the repository may presume that only the dataset submitter will be allowed access. Example 2: access &lt;access authSystem=&quot;knb&quot; order=&quot;allowFirst&quot; scope=&quot;document&quot;&gt; &lt;allow&gt; &lt;principal&gt;uid=FLS,o=lter,dc=ecoinformatics,dc=org&lt;/principal&gt; &lt;permission&gt;all&lt;/permission&gt; &lt;/allow&gt; &lt;allow&gt; &lt;principal&gt;public&lt;/principal&gt; &lt;permission&gt;read&lt;/permission&gt; &lt;/allow&gt; &lt;/access&gt; "],
["about-this-book.html", "7 About this book 7.1 Guidelines: 7.2 Other stuff, maybe drop", " 7 About this book This site is book written in Markdown, and transformed to HTML with the bookdown package The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) It is based on the sample from https://bookdown.org/yihui/rmarkdown/bookdown-start.html 7.1 Guidelines: Each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile the PDF, you need XeLaTeX. Install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. 7.2 Other stuff, maybe drop the search function (in header) only works once files are on a server. to preview drafts, use serve_book (if installed) or generate thru an Rproject. (or just push it over to git where its gonna live anyway.) To create a bib database: "]
]
